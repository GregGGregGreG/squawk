/*
 * Copyright 2004-2008 Sun Microsystems, Inc. All Rights Reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
 * 
 * This code is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2
 * only, as published by the Free Software Foundation.
 * 
 * This code is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License version 2 for more details (a copy is
 * included in the LICENSE file that accompanied this code).
 * 
 * You should have received a copy of the GNU General Public License
 * version 2 along with this work; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA
 * 
 * Please contact Sun Microsystems, Inc., 16 Network Circle, Menlo
 * Park, CA 94025 or visit www.sun.com if you need additional
 * information or have any questions.
 */

/* **** GENERATED FILE -- DO NOT EDIT ****
 *      generated by com.sun.squawk.builder.gen.SwitchDotC
 */
#include "opc.h"

#ifdef USELABELS
#define OPCODE_DECL
#define FETCH_OPCODE    goto *opclabels[fetchUByte()];
#define WHILE(cond)
#define SWITCH(opcode)
#define __CASE(c) opc_##c
#define _CASE(opcode,block) __CASE(opcode): block
#define CASE _CASE
#define CONTINUE        FETCH_OPCODE;
#define BREAK           FETCH_OPCODE;
#define DEFAULT         opc_DEFAULT
#define GOTO_NEXT       goto *opclabels[opcode];
#else
#define OPCODE_DECL     int opcode
#define FETCH_OPCODE    opcode = fetchUByte()
#define WHILE(cond)     while (cond)
#define SWITCH(opcode)  switch (opcode)
#define _CASE(opcode,block)    case opcode: block
#define CASE(opc, b)    Mask_##opc(case opc: b)
#define CONTINUE	    continue
#define BREAK	        goto bottom
#define DEFAULT         default
#define GOTO_NEXT       goto next;
#endif


#ifdef USELABELS
GOTO_NEXT;
#endif
        SWITCH(opcode) {
	    CASE(OPC_CONST_0, {                   iparmNone(); do_const_n(0);        BREAK; })
    	    CASE(OPC_CONST_1, {                   iparmNone(); do_const_n(1);        BREAK; })
            CASE(OPC_CONST_2, {                   iparmNone(); do_const_n(2);        BREAK; })
            CASE(OPC_CONST_3, {                   iparmNone(); do_const_n(3);        BREAK; })
            CASE(OPC_CONST_4, {                   iparmNone(); do_const_n(4);        BREAK; })
            CASE(OPC_CONST_5, {                   iparmNone(); do_const_n(5);        BREAK; })
            CASE(OPC_CONST_6, {                   iparmNone(); do_const_n(6);        BREAK; })
            CASE(OPC_CONST_7, {                   iparmNone(); do_const_n(7);        BREAK; })
            CASE(OPC_CONST_8, {                   iparmNone(); do_const_n(8);        BREAK; })
            CASE(OPC_CONST_9, {                   iparmNone(); do_const_n(9);        BREAK; })
            CASE(OPC_CONST_10, {                  iparmNone(); do_const_n(10);       BREAK; })
            CASE(OPC_CONST_11, {                  iparmNone(); do_const_n(11);       BREAK; })
            CASE(OPC_CONST_12, {                  iparmNone(); do_const_n(12);       BREAK; })
            CASE(OPC_CONST_13, {                  iparmNone(); do_const_n(13);       BREAK; })
            CASE(OPC_CONST_14, {                  iparmNone(); do_const_n(14);       BREAK; })
            CASE(OPC_CONST_15, {                  iparmNone(); do_const_n(15);       BREAK; })
            CASE(OPC_OBJECT_0, {                  iparmNone(); do_object_n(0);       BREAK; })
            CASE(OPC_OBJECT_1, {                  iparmNone(); do_object_n(1);       BREAK; })
            CASE(OPC_OBJECT_2, {                  iparmNone(); do_object_n(2);       BREAK; })
            CASE(OPC_OBJECT_3, {                  iparmNone(); do_object_n(3);       BREAK; })
            CASE(OPC_OBJECT_4, {                  iparmNone(); do_object_n(4);       BREAK; })
            CASE(OPC_OBJECT_5, {                  iparmNone(); do_object_n(5);       BREAK; })
            CASE(OPC_OBJECT_6, {                  iparmNone(); do_object_n(6);       BREAK; })
            CASE(OPC_OBJECT_7, {                  iparmNone(); do_object_n(7);       BREAK; })
            CASE(OPC_OBJECT_8, {                  iparmNone(); do_object_n(8);       BREAK; })
            CASE(OPC_OBJECT_9, {                  iparmNone(); do_object_n(9);       BREAK; })
            CASE(OPC_OBJECT_10, {                 iparmNone(); do_object_n(10);      BREAK; })
            CASE(OPC_OBJECT_11, {                 iparmNone(); do_object_n(11);      BREAK; })
            CASE(OPC_OBJECT_12, {                 iparmNone(); do_object_n(12);      BREAK; })
            CASE(OPC_OBJECT_13, {                 iparmNone(); do_object_n(13);      BREAK; })
            CASE(OPC_OBJECT_14, {                 iparmNone(); do_object_n(14);      BREAK; })
            CASE(OPC_OBJECT_15, {                 iparmNone(); do_object_n(15);      BREAK; })
            CASE(OPC_LOAD_0, {                    iparmNone(); do_load_n(0);         BREAK; })
            CASE(OPC_LOAD_1, {                    iparmNone(); do_load_n(1);         BREAK; })
            CASE(OPC_LOAD_2, {                    iparmNone(); do_load_n(2);         BREAK; })
            CASE(OPC_LOAD_3, {                    iparmNone(); do_load_n(3);         BREAK; })
            CASE(OPC_LOAD_4, {                    iparmNone(); do_load_n(4);         BREAK; })
            CASE(OPC_LOAD_5, {                    iparmNone(); do_load_n(5);         BREAK; })
            CASE(OPC_LOAD_6, {                    iparmNone(); do_load_n(6);         BREAK; })
            CASE(OPC_LOAD_7, {                    iparmNone(); do_load_n(7);         BREAK; })
            CASE(OPC_LOAD_8, {                    iparmNone(); do_load_n(8);         BREAK; })
            CASE(OPC_LOAD_9, {                    iparmNone(); do_load_n(9);         BREAK; })
            CASE(OPC_LOAD_10, {                   iparmNone(); do_load_n(10);        BREAK; })
            CASE(OPC_LOAD_11, {                   iparmNone(); do_load_n(11);        BREAK; })
            CASE(OPC_LOAD_12, {                   iparmNone(); do_load_n(12);        BREAK; })
            CASE(OPC_LOAD_13, {                   iparmNone(); do_load_n(13);        BREAK; })
            CASE(OPC_LOAD_14, {                   iparmNone(); do_load_n(14);        BREAK; })
            CASE(OPC_LOAD_15, {                   iparmNone(); do_load_n(15);        BREAK; })
            CASE(OPC_STORE_0, {                   iparmNone(); do_store_n(0);        BREAK; })
            CASE(OPC_STORE_1, {                   iparmNone(); do_store_n(1);        BREAK; })
            CASE(OPC_STORE_2, {                   iparmNone(); do_store_n(2);        BREAK; })
            CASE(OPC_STORE_3, {                   iparmNone(); do_store_n(3);        BREAK; })
            CASE(OPC_STORE_4, {                   iparmNone(); do_store_n(4);        BREAK; })
            CASE(OPC_STORE_5, {                   iparmNone(); do_store_n(5);        BREAK; })
            CASE(OPC_STORE_6, {                   iparmNone(); do_store_n(6);        BREAK; })
            CASE(OPC_STORE_7, {                   iparmNone(); do_store_n(7);        BREAK; })
            CASE(OPC_STORE_8, {                   iparmNone(); do_store_n(8);        BREAK; })
            CASE(OPC_STORE_9, {                   iparmNone(); do_store_n(9);        BREAK; })
            CASE(OPC_STORE_10, {                  iparmNone(); do_store_n(10);       BREAK; })
            CASE(OPC_STORE_11, {                  iparmNone(); do_store_n(11);       BREAK; })
            CASE(OPC_STORE_12, {                  iparmNone(); do_store_n(12);       BREAK; })
            CASE(OPC_STORE_13, {                  iparmNone(); do_store_n(13);       BREAK; })
            CASE(OPC_STORE_14, {                  iparmNone(); do_store_n(14);       BREAK; })
            CASE(OPC_STORE_15, {                  iparmNone(); do_store_n(15);       BREAK; })
            CASE(OPC_LOADPARM_0, {                iparmNone(); do_loadparm_n(0);     BREAK; })
            CASE(OPC_LOADPARM_1, {                iparmNone(); do_loadparm_n(1);     BREAK; })
            CASE(OPC_LOADPARM_2, {                iparmNone(); do_loadparm_n(2);     BREAK; })
            CASE(OPC_LOADPARM_3, {                iparmNone(); do_loadparm_n(3);     BREAK; })
            CASE(OPC_LOADPARM_4, {                iparmNone(); do_loadparm_n(4);     BREAK; })
            CASE(OPC_LOADPARM_5, {                iparmNone(); do_loadparm_n(5);     BREAK; })
            CASE(OPC_LOADPARM_6, {                iparmNone(); do_loadparm_n(6);     BREAK; })
            CASE(OPC_LOADPARM_7, {                iparmNone(); do_loadparm_n(7);     BREAK; })
            CASE(OPC_WIDE_M1, {                   iparmNone(); do_wide_n(-1);        BREAK; })
            CASE(OPC_WIDE_0, {                    iparmNone(); do_wide_n(0);         BREAK; })
            CASE(OPC_WIDE_1, {                    iparmNone(); do_wide_n(1);         BREAK; })
            CASE(OPC_WIDE_SHORT, {                iparmNone(); do_wide_short();      BREAK; })
            CASE(OPC_WIDE_INT, {                  iparmNone(); do_wide_int();        BREAK; })
            CASE(OPC_ESCAPE, {                    iparmNone(); do_escape();          BREAK; })
            CASE(OPC_ESCAPE_WIDE_M1, {            iparmNone(); do_escape_wide_n(-1); BREAK; })
            CASE(OPC_ESCAPE_WIDE_0, {             iparmNone(); do_escape_wide_n(0);  BREAK; })
            CASE(OPC_ESCAPE_WIDE_1, {             iparmNone(); do_escape_wide_n(1);  BREAK; })
            CASE(OPC_ESCAPE_WIDE_SHORT, {         iparmNone(); do_escape_wide_short();   BREAK; })
            CASE(OPC_ESCAPE_WIDE_INT, {           iparmNone(); do_escape_wide_int(); BREAK; })
            CASE(OPC_CATCH, {                     iparmNone(); do_catch();           BREAK; })
            CASE(OPC_CONST_NULL, {                iparmNone(); do_const_null();      BREAK; })
            CASE(OPC_CONST_M1, {                  iparmNone(); do_const_n(-1);       BREAK; })
            CASE(OPC_CONST_BYTE, {                iparmNone(); do_const_byte();      BREAK; })
            CASE(OPC_CONST_SHORT, {               iparmNone(); do_const_short();     BREAK; })
            CASE(OPC_CONST_CHAR, {                iparmNone(); do_const_char();      BREAK; })
            CASE(OPC_CONST_INT, {                 iparmNone(); do_const_int();       BREAK; })
            CASE(OPC_CONST_LONG, {                iparmNone(); do_const_long();      BREAK; })
            CASE(OPC_OBJECT, {                    iparmUByte(); do_object();         BREAK; })
            CASE(OPC_OBJECT_WIDE, {               do_object();                       BREAK; })
            CASE(OPC_LOAD, {                      iparmUByte(); do_load();           BREAK; })
            CASE(OPC_LOAD_WIDE, {                 do_load();                         BREAK; })
            CASE(OPC_LOAD_I2, {                   iparmUByte(); do_load_i2();        BREAK; })
            CASE(OPC_LOAD_I2_WIDE, {              do_load_i2();                      BREAK; })
            CASE(OPC_STORE, {                     iparmUByte(); do_store();          BREAK; })
            CASE(OPC_STORE_WIDE, {                do_store();                        BREAK; })
            CASE(OPC_STORE_I2, {                  iparmUByte(); do_store_i2();       BREAK; })
            CASE(OPC_STORE_I2_WIDE, {             do_store_i2();                     BREAK; })
            CASE(OPC_LOADPARM, {                  iparmUByte(); do_loadparm();       BREAK; })
            CASE(OPC_LOADPARM_WIDE, {             do_loadparm();                     BREAK; })
            CASE(OPC_LOADPARM_I2, {               iparmUByte(); do_loadparm_i2();    BREAK; })
            CASE(OPC_LOADPARM_I2_WIDE, {          do_loadparm_i2();                  BREAK; })
            CASE(OPC_STOREPARM, {                 iparmUByte(); do_storeparm();      BREAK; })
            CASE(OPC_STOREPARM_WIDE, {            do_storeparm();                    BREAK; })
            CASE(OPC_STOREPARM_I2, {              iparmUByte(); do_storeparm_i2();   BREAK; })
            CASE(OPC_STOREPARM_I2_WIDE, {         do_storeparm_i2();                 BREAK; })
            CASE(OPC_INC, {                       iparmUByte(); do_inc();            BREAK; })
            CASE(OPC_INC_WIDE, {                  do_inc();                          BREAK; })
            CASE(OPC_DEC, {                       iparmUByte(); do_dec();            BREAK; })
            CASE(OPC_DEC_WIDE, {                  do_dec();                          BREAK; })
            CASE(OPC_INCPARM, {                   iparmUByte(); do_incparm();        BREAK; })
            CASE(OPC_INCPARM_WIDE, {              do_incparm();                      BREAK; })
            CASE(OPC_DECPARM, {                   iparmUByte(); do_decparm();        BREAK; })
            CASE(OPC_DECPARM_WIDE, {              do_decparm();                      BREAK; })
            CASE(OPC_GOTO, {                      iparmByte(); do_goto();            BREAK; })
            _CASE(OPC_GOTO_WIDE, {                 do_goto();                         BREAK; })
            CASE(OPC_IF_EQ_O, {                   iparmByte(); do_if_eq_o(true);     BREAK; })
            CASE(OPC_IF_EQ_O_WIDE, {              do_if_eq_o(true);                  BREAK; })
            CASE(OPC_IF_NE_O, {                   iparmByte(); do_if_ne_o(true);     BREAK; })
            CASE(OPC_IF_NE_O_WIDE, {              do_if_ne_o(true);                  BREAK; })
            CASE(OPC_IF_CMPEQ_O, {                iparmByte(); do_if_eq_o(false);    BREAK; })
            CASE(OPC_IF_CMPEQ_O_WIDE, {           do_if_eq_o(false);                 BREAK; })
            CASE(OPC_IF_CMPNE_O, {                iparmByte(); do_if_ne_o(false);    BREAK; })
            CASE(OPC_IF_CMPNE_O_WIDE, {           do_if_ne_o(false);                 BREAK; })
            CASE(OPC_IF_EQ_I, {                   iparmByte(); do_if_eq_i(true);     BREAK; })
            CASE(OPC_IF_EQ_I_WIDE, {              do_if_eq_i(true);                  BREAK; })
            CASE(OPC_IF_NE_I, {                   iparmByte(); do_if_ne_i(true);     BREAK; })
            CASE(OPC_IF_NE_I_WIDE, {              do_if_ne_i(true);                  BREAK; })
            CASE(OPC_IF_LT_I, {                   iparmByte(); do_if_lt_i(true);     BREAK; })
            CASE(OPC_IF_LT_I_WIDE, {              do_if_lt_i(true);                  BREAK; })
            CASE(OPC_IF_LE_I, {                   iparmByte(); do_if_le_i(true);     BREAK; })
            CASE(OPC_IF_LE_I_WIDE, {              do_if_le_i(true);                  BREAK; })
            CASE(OPC_IF_GT_I, {                   iparmByte(); do_if_gt_i(true);     BREAK; })
            CASE(OPC_IF_GT_I_WIDE, {              do_if_gt_i(true);                  BREAK; })
            CASE(OPC_IF_GE_I, {                   iparmByte(); do_if_ge_i(true);     BREAK; })
            CASE(OPC_IF_GE_I_WIDE, {              do_if_ge_i(true);                  BREAK; })
            CASE(OPC_IF_CMPEQ_I, {                iparmByte(); do_if_eq_i(false);    BREAK; })
            CASE(OPC_IF_CMPEQ_I_WIDE, {           do_if_eq_i(false);                 BREAK; })
            CASE(OPC_IF_CMPNE_I, {                iparmByte(); do_if_ne_i(false);    BREAK; })
            CASE(OPC_IF_CMPNE_I_WIDE, {           do_if_ne_i(false);                 BREAK; })
            CASE(OPC_IF_CMPLT_I, {                iparmByte(); do_if_lt_i(false);    BREAK; })
            CASE(OPC_IF_CMPLT_I_WIDE, {           do_if_lt_i(false);                 BREAK; })
            CASE(OPC_IF_CMPLE_I, {                iparmByte(); do_if_le_i(false);    BREAK; })
            CASE(OPC_IF_CMPLE_I_WIDE, {           do_if_le_i(false);                 BREAK; })
            CASE(OPC_IF_CMPGT_I, {                iparmByte(); do_if_gt_i(false);    BREAK; })
            CASE(OPC_IF_CMPGT_I_WIDE, {           do_if_gt_i(false);                 BREAK; })
            CASE(OPC_IF_CMPGE_I, {                iparmByte(); do_if_ge_i(false);    BREAK; })
            CASE(OPC_IF_CMPGE_I_WIDE, {           do_if_ge_i(false);                 BREAK; })
            CASE(OPC_IF_EQ_L, {                   iparmByte(); do_if_eq_l(true);     BREAK; })
            CASE(OPC_IF_EQ_L_WIDE, {              do_if_eq_l(true);                  BREAK; })
            CASE(OPC_IF_NE_L, {                   iparmByte(); do_if_ne_l(true);     BREAK; })
            CASE(OPC_IF_NE_L_WIDE, {              do_if_ne_l(true);                  BREAK; })
            CASE(OPC_IF_LT_L, {                   iparmByte(); do_if_lt_l(true);     BREAK; })
            CASE(OPC_IF_LT_L_WIDE, {              do_if_lt_l(true);                  BREAK; })
            CASE(OPC_IF_LE_L, {                   iparmByte(); do_if_le_l(true);     BREAK; })
            CASE(OPC_IF_LE_L_WIDE, {              do_if_le_l(true);                  BREAK; })
            CASE(OPC_IF_GT_L, {                   iparmByte(); do_if_gt_l(true);     BREAK; })
            CASE(OPC_IF_GT_L_WIDE, {              do_if_gt_l(true);                  BREAK; })
            CASE(OPC_IF_GE_L, {                   iparmByte(); do_if_ge_l(true);     BREAK; })
            CASE(OPC_IF_GE_L_WIDE, {              do_if_ge_l(true);                  BREAK; })
            CASE(OPC_IF_CMPEQ_L, {                iparmByte(); do_if_eq_l(false);    BREAK; })
            CASE(OPC_IF_CMPEQ_L_WIDE, {           do_if_eq_l(false);                 BREAK; })
            CASE(OPC_IF_CMPNE_L, {                iparmByte(); do_if_ne_l(false);    BREAK; })
            CASE(OPC_IF_CMPNE_L_WIDE, {           do_if_ne_l(false);                 BREAK; })
            CASE(OPC_IF_CMPLT_L, {                iparmByte(); do_if_lt_l(false);    BREAK; })
            CASE(OPC_IF_CMPLT_L_WIDE, {           do_if_lt_l(false);                 BREAK; })
            CASE(OPC_IF_CMPLE_L, {                iparmByte(); do_if_le_l(false);    BREAK; })
            CASE(OPC_IF_CMPLE_L_WIDE, {           do_if_le_l(false);                 BREAK; })
            CASE(OPC_IF_CMPGT_L, {                iparmByte(); do_if_gt_l(false);    BREAK; })
            CASE(OPC_IF_CMPGT_L_WIDE, {           do_if_gt_l(false);                 BREAK; })
            CASE(OPC_IF_CMPGE_L, {                iparmByte(); do_if_ge_l(false);    BREAK; })
            CASE(OPC_IF_CMPGE_L_WIDE, {           do_if_ge_l(false);                 BREAK; })
            CASE(OPC_GETSTATIC_I, {               iparmUByte(); do_getstatic_i(false);  BREAK; })
            CASE(OPC_GETSTATIC_I_WIDE, {          do_getstatic_i(false);             BREAK; })
            CASE(OPC_GETSTATIC_O, {               iparmUByte(); do_getstatic_o(false);  BREAK; })
            CASE(OPC_GETSTATIC_O_WIDE, {          do_getstatic_o(false);             BREAK; })
            CASE(OPC_GETSTATIC_L, {               iparmUByte(); do_getstatic_l(false);  BREAK; })
            CASE(OPC_GETSTATIC_L_WIDE, {          do_getstatic_l(false);             BREAK; })
            CASE(OPC_CLASS_GETSTATIC_I, {         iparmUByte(); do_getstatic_i(true);   BREAK; })
            CASE(OPC_CLASS_GETSTATIC_I_WIDE, {    do_getstatic_i(true);              BREAK; })
            CASE(OPC_CLASS_GETSTATIC_O, {         iparmUByte(); do_getstatic_o(true);   BREAK; })
            CASE(OPC_CLASS_GETSTATIC_O_WIDE, {    do_getstatic_o(true);              BREAK; })
            CASE(OPC_CLASS_GETSTATIC_L, {         iparmUByte(); do_getstatic_l(true);   BREAK; })
            CASE(OPC_CLASS_GETSTATIC_L_WIDE, {    do_getstatic_l(true);              BREAK; })
            CASE(OPC_PUTSTATIC_I, {               iparmUByte(); do_putstatic_i(false);  BREAK; })
            CASE(OPC_PUTSTATIC_I_WIDE, {          do_putstatic_i(false);             BREAK; })
            CASE(OPC_PUTSTATIC_O, {               iparmUByte(); do_putstatic_o(false);  BREAK; })
            CASE(OPC_PUTSTATIC_O_WIDE, {          do_putstatic_o(false);             BREAK; })
            CASE(OPC_PUTSTATIC_L, {               iparmUByte(); do_putstatic_l(false);  BREAK; })
            CASE(OPC_PUTSTATIC_L_WIDE, {          do_putstatic_l(false);             BREAK; })
            CASE(OPC_CLASS_PUTSTATIC_I, {         iparmUByte(); do_putstatic_i(true);   BREAK; })
            CASE(OPC_CLASS_PUTSTATIC_I_WIDE, {    do_putstatic_i(true);              BREAK; })
            CASE(OPC_CLASS_PUTSTATIC_O, {         iparmUByte(); do_putstatic_o(true);   BREAK; })
            CASE(OPC_CLASS_PUTSTATIC_O_WIDE, {    do_putstatic_o(true);              BREAK; })
            CASE(OPC_CLASS_PUTSTATIC_L, {         iparmUByte(); do_putstatic_l(true);   BREAK; })
            CASE(OPC_CLASS_PUTSTATIC_L_WIDE, {    do_putstatic_l(true);              BREAK; })
            CASE(OPC_GETFIELD_I, {                iparmUByte(); do_getfield_i(false);   BREAK; })
            CASE(OPC_GETFIELD_I_WIDE, {           do_getfield_i(false);              BREAK; })
            CASE(OPC_GETFIELD_B, {                iparmUByte(); do_getfield_b(false);   BREAK; })
            CASE(OPC_GETFIELD_B_WIDE, {           do_getfield_b(false);              BREAK; })
            CASE(OPC_GETFIELD_S, {                iparmUByte(); do_getfield_s(false);   BREAK; })
            CASE(OPC_GETFIELD_S_WIDE, {           do_getfield_s(false);              BREAK; })
            CASE(OPC_GETFIELD_C, {                iparmUByte(); do_getfield_c(false);   BREAK; })
            CASE(OPC_GETFIELD_C_WIDE, {           do_getfield_c(false);              BREAK; })
            CASE(OPC_GETFIELD_O, {                iparmUByte(); do_getfield_o(false);   BREAK; })
            CASE(OPC_GETFIELD_O_WIDE, {           do_getfield_o(false);              BREAK; })
            CASE(OPC_GETFIELD_L, {                iparmUByte(); do_getfield_l(false);   BREAK; })
            CASE(OPC_GETFIELD_L_WIDE, {           do_getfield_l(false);              BREAK; })
            CASE(OPC_GETFIELD0_I, {               iparmUByte(); do_getfield_i(true); BREAK; })
            CASE(OPC_GETFIELD0_I_WIDE, {          do_getfield_i(true);               BREAK; })
            CASE(OPC_GETFIELD0_B, {               iparmUByte(); do_getfield_b(true); BREAK; })
            CASE(OPC_GETFIELD0_B_WIDE, {          do_getfield_b(true);               BREAK; })
            CASE(OPC_GETFIELD0_S, {               iparmUByte(); do_getfield_s(true); BREAK; })
            CASE(OPC_GETFIELD0_S_WIDE, {          do_getfield_s(true);               BREAK; })
            CASE(OPC_GETFIELD0_C, {               iparmUByte(); do_getfield_c(true); BREAK; })
            CASE(OPC_GETFIELD0_C_WIDE, {          do_getfield_c(true);               BREAK; })
            CASE(OPC_GETFIELD0_O, {               iparmUByte(); do_getfield_o(true); BREAK; })
            CASE(OPC_GETFIELD0_O_WIDE, {          do_getfield_o(true);               BREAK; })
            CASE(OPC_GETFIELD0_L, {               iparmUByte(); do_getfield_l(true); BREAK; })
            CASE(OPC_GETFIELD0_L_WIDE, {          do_getfield_l(true);               BREAK; })
            CASE(OPC_PUTFIELD_I, {                iparmUByte(); do_putfield_i(false);   BREAK; })
            CASE(OPC_PUTFIELD_I_WIDE, {           do_putfield_i(false);              BREAK; })
            CASE(OPC_PUTFIELD_B, {                iparmUByte(); do_putfield_b(false);   BREAK; })
            CASE(OPC_PUTFIELD_B_WIDE, {           do_putfield_b(false);              BREAK; })
            CASE(OPC_PUTFIELD_S, {                iparmUByte(); do_putfield_s(false);   BREAK; })
            CASE(OPC_PUTFIELD_S_WIDE, {           do_putfield_s(false);              BREAK; })
            CASE(OPC_PUTFIELD_O, {                iparmUByte(); do_putfield_o(false);   BREAK; })
            CASE(OPC_PUTFIELD_O_WIDE, {           do_putfield_o(false);              BREAK; })
            CASE(OPC_PUTFIELD_L, {                iparmUByte(); do_putfield_l(false);   BREAK; })
            CASE(OPC_PUTFIELD_L_WIDE, {           do_putfield_l(false);              BREAK; })
            CASE(OPC_PUTFIELD0_I, {               iparmUByte(); do_putfield_i(true); BREAK; })
            CASE(OPC_PUTFIELD0_I_WIDE, {          do_putfield_i(true);               BREAK; })
            CASE(OPC_PUTFIELD0_B, {               iparmUByte(); do_putfield_b(true); BREAK; })
            CASE(OPC_PUTFIELD0_B_WIDE, {          do_putfield_b(true);               BREAK; })
            CASE(OPC_PUTFIELD0_S, {               iparmUByte(); do_putfield_s(true); BREAK; })
            CASE(OPC_PUTFIELD0_S_WIDE, {          do_putfield_s(true);               BREAK; })
            CASE(OPC_PUTFIELD0_O, {               iparmUByte(); do_putfield_o(true); BREAK; })
            CASE(OPC_PUTFIELD0_O_WIDE, {          do_putfield_o(true);               BREAK; })
            CASE(OPC_PUTFIELD0_L, {               iparmUByte(); do_putfield_l(true); BREAK; })
            CASE(OPC_PUTFIELD0_L_WIDE, {          do_putfield_l(true);               BREAK; })
            CASE(OPC_INVOKEVIRTUAL_I, {           iparmUByte(); do_invokevirtual();  BREAK; })
            CASE(OPC_INVOKEVIRTUAL_I_WIDE, {      do_invokevirtual();                BREAK; })
            CASE(OPC_INVOKEVIRTUAL_V, {           iparmUByte(); do_invokevirtual();  BREAK; })
            CASE(OPC_INVOKEVIRTUAL_V_WIDE, {      do_invokevirtual();                BREAK; })
            CASE(OPC_INVOKEVIRTUAL_L, {           iparmUByte(); do_invokevirtual();  BREAK; })
            CASE(OPC_INVOKEVIRTUAL_L_WIDE, {      do_invokevirtual();                BREAK; })
            CASE(OPC_INVOKEVIRTUAL_O, {           iparmUByte(); do_invokevirtual();  BREAK; })
            CASE(OPC_INVOKEVIRTUAL_O_WIDE, {      do_invokevirtual();                BREAK; })
            CASE(OPC_INVOKESTATIC_I, {            iparmUByte(); do_invokestatic();   BREAK; })
            CASE(OPC_INVOKESTATIC_I_WIDE, {       do_invokestatic();                 BREAK; })
            CASE(OPC_INVOKESTATIC_V, {            iparmUByte(); do_invokestatic();   BREAK; })
            CASE(OPC_INVOKESTATIC_V_WIDE, {       do_invokestatic();                 BREAK; })
            CASE(OPC_INVOKESTATIC_L, {            iparmUByte(); do_invokestatic();   BREAK; })
            CASE(OPC_INVOKESTATIC_L_WIDE, {       do_invokestatic();                 BREAK; })
            CASE(OPC_INVOKESTATIC_O, {            iparmUByte(); do_invokestatic();   BREAK; })
            CASE(OPC_INVOKESTATIC_O_WIDE, {       do_invokestatic();                 BREAK; })
            CASE(OPC_INVOKESUPER_I, {             iparmUByte(); do_invokesuper();    BREAK; })
            CASE(OPC_INVOKESUPER_I_WIDE, {        do_invokesuper();                  BREAK; })
            CASE(OPC_INVOKESUPER_V, {             iparmUByte(); do_invokesuper();    BREAK; })
            CASE(OPC_INVOKESUPER_V_WIDE, {        do_invokesuper();                  BREAK; })
            CASE(OPC_INVOKESUPER_L, {             iparmUByte(); do_invokesuper();    BREAK; })
            CASE(OPC_INVOKESUPER_L_WIDE, {        do_invokesuper();                  BREAK; })
            CASE(OPC_INVOKESUPER_O, {             iparmUByte(); do_invokesuper();    BREAK; })
            CASE(OPC_INVOKESUPER_O_WIDE, {        do_invokesuper();                  BREAK; })
            CASE(OPC_INVOKENATIVE_I, {            iparmUByte(); do_invokenative();   BREAK; })
            CASE(OPC_INVOKENATIVE_I_WIDE, {       do_invokenative();                 BREAK; })
            CASE(OPC_INVOKENATIVE_V, {            iparmUByte(); do_invokenative();   BREAK; })
            CASE(OPC_INVOKENATIVE_V_WIDE, {       do_invokenative();                 BREAK; })
            CASE(OPC_INVOKENATIVE_L, {            iparmUByte(); do_invokenative();   BREAK; })
            CASE(OPC_INVOKENATIVE_L_WIDE, {       do_invokenative();                 BREAK; })
            CASE(OPC_INVOKENATIVE_O, {            iparmUByte(); do_invokenative();   BREAK; })
            CASE(OPC_INVOKENATIVE_O_WIDE, {       do_invokenative();                 BREAK; })
            CASE(OPC_FINDSLOT, {                  iparmUByte(); do_findslot();       BREAK; })
            CASE(OPC_FINDSLOT_WIDE, {             do_findslot();                     BREAK; })
            _CASE(OPC_EXTEND, {                    iparmUByte(); do_extend();         BREAK; })
            _CASE(OPC_EXTEND_WIDE, {               do_extend();                       BREAK; })
            CASE(OPC_INVOKESLOT_I, {              iparmNone(); do_invokeslot();      BREAK; })
            CASE(OPC_INVOKESLOT_V, {              iparmNone(); do_invokeslot();      BREAK; })
            CASE(OPC_INVOKESLOT_L, {              iparmNone(); do_invokeslot();      BREAK; })
            CASE(OPC_INVOKESLOT_O, {              iparmNone(); do_invokeslot();      BREAK; })
            CASE(OPC_RETURN_V, {                  iparmNone(); do_return_v();        BREAK; })
            CASE(OPC_RETURN_I, {                  iparmNone(); do_return_i();        BREAK; })
            CASE(OPC_RETURN_L, {                  iparmNone(); do_return_l();        BREAK; })
            CASE(OPC_RETURN_O, {                  iparmNone(); do_return_o();        BREAK; })
            CASE(OPC_TABLESWITCH_I, {             iparmNone(); do_tableswitch(4);    BREAK; })
            CASE(OPC_TABLESWITCH_S, {             iparmNone(); do_tableswitch(2);    BREAK; })
            _CASE(OPC_EXTEND0, {                   iparmNone(); do_extend0();         BREAK; })
            CASE(OPC_ADD_I, {                     iparmNone(); do_add_i();           BREAK; })
            CASE(OPC_SUB_I, {                     iparmNone(); do_sub_i();           BREAK; })
            CASE(OPC_AND_I, {                     iparmNone(); do_and_i();           BREAK; })
            CASE(OPC_OR_I, {                      iparmNone(); do_or_i();            BREAK; })
            CASE(OPC_XOR_I, {                     iparmNone(); do_xor_i();           BREAK; })
            CASE(OPC_SHL_I, {                     iparmNone(); do_shl_i();           BREAK; })
            CASE(OPC_SHR_I, {                     iparmNone(); do_shr_i();           BREAK; })
            CASE(OPC_USHR_I, {                    iparmNone(); do_ushr_i();          BREAK; })
            CASE(OPC_MUL_I, {                     iparmNone(); do_mul_i();           BREAK; })
            CASE(OPC_DIV_I, {                     iparmNone(); do_div_i();           BREAK; })
            CASE(OPC_REM_I, {                     iparmNone(); do_rem_i();           BREAK; })
            CASE(OPC_NEG_I, {                     iparmNone(); do_neg_i();           BREAK; })
            CASE(OPC_I2B, {                       iparmNone(); do_i2b();             BREAK; })
            CASE(OPC_I2S, {                       iparmNone(); do_i2s();             BREAK; })
            CASE(OPC_I2C, {                       iparmNone(); do_i2c();             BREAK; })
            CASE(OPC_ADD_L, {                     iparmNone(); do_add_l();           BREAK; })
            CASE(OPC_SUB_L, {                     iparmNone(); do_sub_l();           BREAK; })
            CASE(OPC_MUL_L, {                     iparmNone(); do_mul_l();           BREAK; })
            CASE(OPC_DIV_L, {                     iparmNone(); do_div_l();           BREAK; })
            CASE(OPC_REM_L, {                     iparmNone(); do_rem_l();           BREAK; })
            CASE(OPC_AND_L, {                     iparmNone(); do_and_l();           BREAK; })
            CASE(OPC_OR_L, {                      iparmNone(); do_or_l();            BREAK; })
            CASE(OPC_XOR_L, {                     iparmNone(); do_xor_l();           BREAK; })
            CASE(OPC_NEG_L, {                     iparmNone(); do_neg_l();           BREAK; })
            CASE(OPC_SHL_L, {                     iparmNone(); do_shl_l();           BREAK; })
            CASE(OPC_SHR_L, {                     iparmNone(); do_shr_l();           BREAK; })
            CASE(OPC_USHR_L, {                    iparmNone(); do_ushr_l();          BREAK; })
            CASE(OPC_L2I, {                       iparmNone(); do_l2i();             BREAK; })
            CASE(OPC_I2L, {                       iparmNone(); do_i2l();             BREAK; })
            CASE(OPC_THROW, {                     iparmNone(); do_throw();           BREAK; })
            CASE(OPC_POP_1, {                     iparmNone(); do_pop_n(1);          BREAK; })
            CASE(OPC_POP_2, {                     iparmNone(); do_pop_n(2);          BREAK; })
            CASE(OPC_MONITORENTER, {              iparmNone(); do_monitorenter();    BREAK; })
            CASE(OPC_MONITOREXIT, {               iparmNone(); do_monitorexit();     BREAK; })
            CASE(OPC_CLASS_MONITORENTER, {        iparmNone(); do_class_monitorenter();           BREAK; })
            CASE(OPC_CLASS_MONITOREXIT, {         iparmNone(); do_class_monitorexit();            BREAK; })
            CASE(OPC_ARRAYLENGTH, {               iparmNone(); do_arraylength();     BREAK; })
            CASE(OPC_NEW, {                       iparmNone(); do_new();             BREAK; })
            CASE(OPC_NEWARRAY, {                  iparmNone(); do_newarray();        BREAK; })
            CASE(OPC_NEWDIMENSION, {              iparmNone(); do_newdimension();    BREAK; })
            CASE(OPC_CLASS_CLINIT, {              iparmNone(); do_class_clinit();    BREAK; })
            CASE(OPC_BBTARGET_SYS, {              iparmNone(); do_bbtarget_sys();    BREAK; })
            CASE(OPC_BBTARGET_APP, {              iparmNone(); do_bbtarget_app();    BREAK; })
            CASE(OPC_INSTANCEOF, {                iparmNone(); do_instanceof();      BREAK; })
            CASE(OPC_CHECKCAST, {                 iparmNone(); do_checkcast();       BREAK; })
            CASE(OPC_ALOAD_I, {                   iparmNone(); do_aload_i();         BREAK; })
            CASE(OPC_ALOAD_B, {                   iparmNone(); do_aload_b();         BREAK; })
            CASE(OPC_ALOAD_S, {                   iparmNone(); do_aload_s();         BREAK; })
            CASE(OPC_ALOAD_C, {                   iparmNone(); do_aload_c();         BREAK; })
            CASE(OPC_ALOAD_O, {                   iparmNone(); do_aload_o();         BREAK; })
            CASE(OPC_ALOAD_L, {                   iparmNone(); do_aload_l();         BREAK; })
            CASE(OPC_ASTORE_I, {                  iparmNone(); do_astore_i();        BREAK; })
            CASE(OPC_ASTORE_B, {                  iparmNone(); do_astore_b();        BREAK; })
            CASE(OPC_ASTORE_S, {                  iparmNone(); do_astore_s();        BREAK; })
            CASE(OPC_ASTORE_O, {                  iparmNone(); do_astore_o();        BREAK; })
            CASE(OPC_ASTORE_L, {                  iparmNone(); do_astore_l();        BREAK; })
            CASE(OPC_LOOKUP_I, {                  iparmNone(); do_lookup_i();        BREAK; })
            CASE(OPC_LOOKUP_B, {                  iparmNone(); do_lookup_b();        BREAK; })
            CASE(OPC_LOOKUP_S, {                  iparmNone(); do_lookup_s();        BREAK; })
            CASE(OPC_PAUSE, {                     iparmNone(); do_pause();           BREAK; })

#if ENABLE_FLOATS
            CASE(OPC_FCMPL, {                     iparmNone(); do_fcmpl();           BREAK; })
            CASE(OPC_FCMPG, {                     iparmNone(); do_fcmpg();           BREAK; })
            CASE(OPC_DCMPL, {                     iparmNone(); do_dcmpl();           BREAK; })
            CASE(OPC_DCMPG, {                     iparmNone(); do_dcmpg();           BREAK; })
            CASE(OPC_GETSTATIC_F, {               iparmUByte(); do_getstatic_f(false);  BREAK; })
            CASE(OPC_GETSTATIC_F_WIDE, {          do_getstatic_f(false);             BREAK; })
            CASE(OPC_GETSTATIC_D, {               iparmUByte(); do_getstatic_d(false);  BREAK; })
            CASE(OPC_GETSTATIC_D_WIDE, {          do_getstatic_d(false);             BREAK; })
            CASE(OPC_CLASS_GETSTATIC_F, {         iparmUByte(); do_getstatic_f(true);   BREAK; })
            CASE(OPC_CLASS_GETSTATIC_F_WIDE, {    do_getstatic_f(true);              BREAK; })
            CASE(OPC_CLASS_GETSTATIC_D, {         iparmUByte(); do_getstatic_d(true);   BREAK; })
            CASE(OPC_CLASS_GETSTATIC_D_WIDE, {    do_getstatic_d(true);              BREAK; })
            CASE(OPC_PUTSTATIC_F, {               iparmUByte(); do_putstatic_f(false);  BREAK; })
            CASE(OPC_PUTSTATIC_F_WIDE, {          do_putstatic_f(false);             BREAK; })
            CASE(OPC_PUTSTATIC_D, {               iparmUByte(); do_putstatic_d(false);  BREAK; })
            CASE(OPC_PUTSTATIC_D_WIDE, {          do_putstatic_d(false);             BREAK; })
            CASE(OPC_CLASS_PUTSTATIC_F, {         iparmUByte(); do_putstatic_f(true);   BREAK; })
            CASE(OPC_CLASS_PUTSTATIC_F_WIDE, {    do_putstatic_f(true);              BREAK; })
            CASE(OPC_CLASS_PUTSTATIC_D, {         iparmUByte(); do_putstatic_d(true);   BREAK; })
            CASE(OPC_CLASS_PUTSTATIC_D_WIDE, {    do_putstatic_d(true);              BREAK; })
            CASE(OPC_GETFIELD_F, {                iparmUByte(); do_getfield_f(false);   BREAK; })
            CASE(OPC_GETFIELD_F_WIDE, {           do_getfield_f(false);              BREAK; })
            CASE(OPC_GETFIELD_D, {                iparmUByte(); do_getfield_d(false);   BREAK; })
            CASE(OPC_GETFIELD_D_WIDE, {           do_getfield_d(false);              BREAK; })
            CASE(OPC_GETFIELD0_F, {               iparmUByte(); do_getfield_f(true); BREAK; })
            CASE(OPC_GETFIELD0_F_WIDE, {          do_getfield_f(true);               BREAK; })
            CASE(OPC_GETFIELD0_D, {               iparmUByte(); do_getfield_d(true); BREAK; })
            CASE(OPC_GETFIELD0_D_WIDE, {          do_getfield_d(true);               BREAK; })
            CASE(OPC_PUTFIELD_F, {                iparmUByte(); do_putfield_f(false);   BREAK; })
            CASE(OPC_PUTFIELD_F_WIDE, {           do_putfield_f(false);              BREAK; })
            CASE(OPC_PUTFIELD_D, {                iparmUByte(); do_putfield_d(false);   BREAK; })
            CASE(OPC_PUTFIELD_D_WIDE, {           do_putfield_d(false);              BREAK; })
            CASE(OPC_PUTFIELD0_F, {               iparmUByte(); do_putfield_f(true); BREAK; })
            CASE(OPC_PUTFIELD0_F_WIDE, {          do_putfield_f(true);               BREAK; })
            CASE(OPC_PUTFIELD0_D, {               iparmUByte(); do_putfield_d(true); BREAK; })
            CASE(OPC_PUTFIELD0_D_WIDE, {          do_putfield_d(true);               BREAK; })
            CASE(OPC_INVOKEVIRTUAL_F, {           iparmUByte(); do_invokevirtual();  BREAK; })
            CASE(OPC_INVOKEVIRTUAL_F_WIDE, {      do_invokevirtual();                BREAK; })
            CASE(OPC_INVOKEVIRTUAL_D, {           iparmUByte(); do_invokevirtual();  BREAK; })
            CASE(OPC_INVOKEVIRTUAL_D_WIDE, {      do_invokevirtual();                BREAK; })
            CASE(OPC_INVOKESTATIC_F, {            iparmUByte(); do_invokestatic();   BREAK; })
            CASE(OPC_INVOKESTATIC_F_WIDE, {       do_invokestatic();                 BREAK; })
            CASE(OPC_INVOKESTATIC_D, {            iparmUByte(); do_invokestatic();   BREAK; })
            CASE(OPC_INVOKESTATIC_D_WIDE, {       do_invokestatic();                 BREAK; })
            CASE(OPC_INVOKESUPER_F, {             iparmUByte(); do_invokesuper();    BREAK; })
            CASE(OPC_INVOKESUPER_F_WIDE, {        do_invokesuper();                  BREAK; })
            CASE(OPC_INVOKESUPER_D, {             iparmUByte(); do_invokesuper();    BREAK; })
            CASE(OPC_INVOKESUPER_D_WIDE, {        do_invokesuper();                  BREAK; })
            CASE(OPC_INVOKENATIVE_F, {            iparmUByte(); do_invokenative();   BREAK; })
            CASE(OPC_INVOKENATIVE_F_WIDE, {       do_invokenative();                 BREAK; })
            CASE(OPC_INVOKENATIVE_D, {            iparmUByte(); do_invokenative();   BREAK; })
            CASE(OPC_INVOKENATIVE_D_WIDE, {       do_invokenative();                 BREAK; })
            CASE(OPC_INVOKESLOT_F, {              iparmNone(); do_invokeslot();      BREAK; })
            CASE(OPC_INVOKESLOT_D, {              iparmNone(); do_invokeslot();      BREAK; })
            CASE(OPC_RETURN_F, {                  iparmNone(); do_return_f();        BREAK; })
            CASE(OPC_RETURN_D, {                  iparmNone(); do_return_d();        BREAK; })
            CASE(OPC_CONST_FLOAT, {               iparmNone(); do_const_float();     BREAK; })
            CASE(OPC_CONST_DOUBLE, {              iparmNone(); do_const_double();    BREAK; })
            CASE(OPC_ADD_F, {                     iparmNone(); do_add_f();           BREAK; })
            CASE(OPC_SUB_F, {                     iparmNone(); do_sub_f();           BREAK; })
            CASE(OPC_MUL_F, {                     iparmNone(); do_mul_f();           BREAK; })
            CASE(OPC_DIV_F, {                     iparmNone(); do_div_f();           BREAK; })
            CASE(OPC_REM_F, {                     iparmNone(); do_rem_f();           BREAK; })
            CASE(OPC_NEG_F, {                     iparmNone(); do_neg_f();           BREAK; })
            CASE(OPC_ADD_D, {                     iparmNone(); do_add_d();           BREAK; })
            CASE(OPC_SUB_D, {                     iparmNone(); do_sub_d();           BREAK; })
            CASE(OPC_MUL_D, {                     iparmNone(); do_mul_d();           BREAK; })
            CASE(OPC_DIV_D, {                     iparmNone(); do_div_d();           BREAK; })
            CASE(OPC_REM_D, {                     iparmNone(); do_rem_d();           BREAK; })
            CASE(OPC_NEG_D, {                     iparmNone(); do_neg_d();           BREAK; })
            CASE(OPC_I2F, {                       iparmNone(); do_i2f();             BREAK; })
            CASE(OPC_L2F, {                       iparmNone(); do_l2f();             BREAK; })
            CASE(OPC_F2I, {                       iparmNone(); do_f2i();             BREAK; })
            CASE(OPC_F2L, {                       iparmNone(); do_f2l();             BREAK; })
            CASE(OPC_I2D, {                       iparmNone(); do_i2d();             BREAK; })
            CASE(OPC_L2D, {                       iparmNone(); do_l2d();             BREAK; })
            CASE(OPC_F2D, {                       iparmNone(); do_f2d();             BREAK; })
            CASE(OPC_D2I, {                       iparmNone(); do_d2i();             BREAK; })
            CASE(OPC_D2L, {                       iparmNone(); do_d2l();             BREAK; })
            CASE(OPC_D2F, {                       iparmNone(); do_d2f();             BREAK; })
            CASE(OPC_ALOAD_F, {                   iparmNone(); do_aload_f();         BREAK; })
            CASE(OPC_ALOAD_D, {                   iparmNone(); do_aload_d();         BREAK; })
            CASE(OPC_ASTORE_F, {                  iparmNone(); do_astore_f();        BREAK; })
            CASE(OPC_ASTORE_D, {                  iparmNone(); do_astore_d();        BREAK; })
#endif /* ENABLE_FLOATS */
	    DEFAULT: fatalVMError("unimplemented opcode");
        }
bottom:;