package com.sun.squawk;

public class ReferenceQueue<T> {
    /**
     * Constructs a new reference-object queue.
     */
    public ReferenceQueue() { }

    private static class Null extends ReferenceQueue {
        boolean enqueue(Ref r) {
			return false;
		}
	}

    final static ReferenceQueue NULL = new Null();
    final private Object lock = new Object();

	Ref head;

	final boolean put(Ref r) {
//		synchronized (r) {
			if (r.queue == null) return false;
//			synchronized (lock) {
				r.queue = null;
				r.next = (head == null) ? r : head;
				this.head = r;
				return true;
//			}
//		}
	}
	
    public Ref poll() {
		synchronized (lock) {
			Ref r = head;
			if (r != null) {
				head = r.next;
				return r;
			}
		}
		return null;
	}
	
    /**
     * Removes the next reference object in this queue, blocking until either
     * one becomes available or the given timeout period expires.
     *
     * <p> This method does not offer real-time guarantees: It schedules the
     * timeout as if by invoking the {@link Object#wait(long)} method.
     *
     * @param  timeout  If positive, block for up to <code>timeout</code>
     *                  milliseconds while waiting for a reference to be
     *                  added to this queue.  If zero, block indefinitely.
     *
     * @return  A reference object, if one was available within the specified
     *          timeout period, otherwise <code>null</code>
     *
     * @throws  IllegalArgumentException
     *          If the value of the timeout argument is negative
     *
     * @throws  InterruptedException
     *          If the timeout wait is interrupted
     */
    public Ref remove(long timeout)
        throws IllegalArgumentException, InterruptedException
    {
        if (timeout < 0) {
            throw new IllegalArgumentException("Negative timeout value");
        }
        synchronized (lock) {
            Ref r = head;
            if (r != null) {
				head = r.next;
				return r;
			}
            for (;;) {
                lock.wait(timeout);
                r = head;
                if (r != null) {
					head = r.next;
					return r;
				}
                if (timeout != 0) return null;
            }
        }
    }

    /**
     * Removes the next reference object in this queue, blocking until one
     * becomes available.
     *
     * @return A reference object, blocking until one becomes available
     * @throws  InterruptedException  If the wait is interrupted
     */
    public Ref remove() throws InterruptedException {
        return remove(0);
    }

}
